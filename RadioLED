#include <Arduino.h>
#include <LowPower.h>
#include <FastLED.h>
#include <SPI.h>
#include <RF24.h>
#include <avr/sleep.h>
#include <avr/power.h>
#include <avr/wdt.h>
#define NUM_LEDS 1
#define LED_PIN 8
#define FIRST_PIPE 20000
#define LISTENING_PERIOD_IN_MS 10000
#define MAX_BEACONS 50
#define PING_ATTEMPTS 10

CRGB leds[NUM_LEDS];
unsigned int targetHue[1] = {0};
unsigned int currentHue[1] = {0};
unsigned long currentMillis;
RF24 radio(9,10);
const long controlPipe = 10000;
unsigned long ownPipe = FIRST_PIPE;
unsigned long matesPipe = FIRST_PIPE;
unsigned long highestPipe = 0;
int loopCounter = 0;

void setup()
{
  Serial.begin(9600);
  FastLED.addLeds<NEOPIXEL, LED_PIN>(leds, NUM_LEDS);
  radio.begin();
  delay(100);
  radio.setRetries(15, 15);
  radio.setPALevel(RF24_PA_HIGH);
  radio.setAutoAck(true);
  radio.stopListening();
  radio.powerDown();

  FastLED.showColor(CHSV(128,255,255));
  delay(1000);
  FastLED.showColor(CHSV(0,0,0));

  delay(generateRandom(0,10000));

  findFreePipe();
  sendBeacon();
  listenForInstruction(true);
}

void loop()
{
  //LowPower.powerDown(SLEEP_1S, ADC_OFF, BOD_OFF);
  delay(1000);
  if(loopCounter % 5 == 0){
    findFreePipe();
  }

  sendBeacon();

  if(listenForInstruction(false)){
    distributeColour();
  }

  setLEDColour();

  if(loopCounter > 30){
    loopCounter = 0;
    selectAndDistributeColour();
  }
  loopCounter += generateRandom(0,5);
  Serial.print(loopCounter);
}

void findFreePipe(){
  ownPipe = FIRST_PIPE;
  bool foundEmptyPipe = false;

  while(!foundEmptyPipe){
    foundEmptyPipe = true; //Assume pipe is empty until proven otherwise
    Serial.print("Checking pipe ");
    Serial.print(ownPipe);
    Serial.print(" - ");
    radio.powerUp();
    radio.openReadingPipe(1,ownPipe);
    radio.startListening();
    currentMillis = millis();
    while(millis() - currentMillis <= LISTENING_PERIOD_IN_MS){
      if(radio.available()){
        Serial.println("in use");
        foundEmptyPipe = false;
        ownPipe++;
        radio.read(&targetHue,sizeof(int));
        break;
      }
    }
    radio.powerDown();
    delay(1000);
  }
  Serial.println("empty");

}

void sendBeacon(){
  for(int i = 0;i < MAX_BEACONS;i++){
    Serial.print("Sending beacon on pipe ");
    Serial.println(ownPipe);
    radio.powerUp();
    radio.stopListening();
    radio.openWritingPipe(ownPipe);
    radio.write(currentHue,sizeof(int));
    radio.powerDown();
    delay(100);
  }
}

bool listenForInstruction(bool initialRun){
  Serial.print("Listening for instruction on pipe ");
  radio.powerUp();
  if(initialRun){
    radio.openReadingPipe(1,FIRST_PIPE);
    Serial.print(FIRST_PIPE);
  }else{
    radio.openReadingPipe(1,ownPipe);
    Serial.print(ownPipe);
  }
  radio.startListening();
  currentMillis = millis();
  while(millis() - currentMillis <= LISTENING_PERIOD_IN_MS){
    if(radio.available()){
      radio.read(&targetHue,sizeof(int));
      Serial.print(", received ");
      Serial.println(targetHue[0]);
      loopCounter = 0;
      return true;
    }
  }
  Serial.println();
  return false;
}

void selectAndDistributeColour(){
  Serial.print("Selecting Colour: ");
  targetHue[0] = generateRandom(0,255);
  Serial.println(targetHue[0]);
  radio.powerUp();
  radio.stopListening();
  if(ownPipe > FIRST_PIPE){
    radio.openWritingPipe(FIRST_PIPE);
  }else{
    radio.openWritingPipe(FIRST_PIPE + 1);
  }

  for(int i=0;i<PING_ATTEMPTS;i++){
    radio.write(targetHue,sizeof(int));
  }
  radio.powerDown();
}

void distributeColour(){
  Serial.print("Distributing Colour: ");
  Serial.println(targetHue[0]);
  radio.powerUp();
  radio.stopListening();
  radio.openWritingPipe(ownPipe + 1);

  for(int i=0;i<PING_ATTEMPTS;i++){
    radio.write(targetHue,sizeof(int));
  }
  radio.powerDown();
}

int generateRandom(int lower, int upper){
  int seed = seedOut(31);
  randomSeed(seed);
  return random(lower,upper);
}

void setLEDColour(){
    while(currentHue[0] < targetHue[0]){
      FastLED.showColor(CHSV(currentHue[0]++,255,255));
      delay(50);
    }
    while(currentHue[0] > targetHue[0]){
      FastLED.showColor(CHSV(currentHue[0]--,255,255));
      delay(50);
    }
}


unsigned int bitOut(void)
{
  static unsigned long firstTime=1, prev=0;
  unsigned long bit1=0, bit0=0, x=0, port=0, limit=99;
  if (firstTime)
  {
    firstTime=0;
    prev=analogRead(port);
  }
  while (limit--)
  {
    x=analogRead(port);
    bit1=(prev!=x?1:0);
    prev=x;
    x=analogRead(port);
    bit0=(prev!=x?1:0);
    prev=x;
    if (bit1!=bit0)
      break;
  }
  return bit1;
}

unsigned long seedOut(unsigned int noOfBits)
{
  // return value with 'noOfBits' random bits set
  unsigned long seed=0;
  for (int i=0;i<noOfBits;++i)
    seed = (seed<<1) | bitOut();
  return seed;
}
